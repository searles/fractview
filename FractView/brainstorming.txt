TODOs for Version 1.1: 
* Android 2.3
* Bug fixing:
** Add "Close" to dialogs [DONE]
** Check whether z is inside an expression when deriving binary functions. [DONE]
** Rotating should not reset dialogs. [DONE]
** LastArc should be between 0 and 1
** Colorizations should have names

* Optimiations:


TODOs for Version 2.0:
* Bookmarks must definitely be in SQLite, but with the possibility to export them 
* Predefined fractals
* Custom colorizations via Sum-Symbol
* 2-dim color palettes
* caching of image
* dragging parameters
* Split view for julia next to mandel (TODO for this: boolean set(String label, Cplx value) returns false when no such point).

Insert transfer + offset in palette.

Specification as inner class of function (and Interface)
spec() then creates a new Spec-object that can be modified.
Function contains a static default-method returning a default-specification.
Function contains a method "create" in which such a modified spec can be used to create a new function. 

For 2dim-functions you might consider relativelayout.

Accept "zn" as "z". Limit number of indices.

Add nova as predefined.

Add cyclic-from parameter

Btw. functions, make predefined and wrapping to create julia sets [Wrapping has been done].

Editable ComboBox (keep the first line, show roots as items): http://stackoverflow.com/questions/11284368/autocompletetextview-force-to-show-all-items

Modify function-view so that you can have predefined with numeric parameters, i.e., no function or inits. For this use combobox that holds descriptor string of all subclasses + specification; i.e., all predefined fractals must be creatable via a specification.

Look at these fractals.
http://eldar.mathstat.uoguelph.ca/dashlock/ftax/Glynn.html

And I want this colorization: http://en.wikipedia.org/wiki/File:Julia-set_N_z3-1.png
http://de.wikipedia.org/wiki/Benutzer:Georg-Johann/Mathematik

average discrete velocity of orbit

Ssum symbols. Add dest to eval, but syntax. Change for numbers. What would be the run index and what about nested loops.  Nested loops are not possible. Use expre also for colorization.

Parser will be next.
And add nova phoenix burningship
Generate z(0).

http://stackoverflow.com/questions/5657828/edittext-is-losing-users-input-when-rotating-android-phone

Installing EGit turned my ADT into Eclipse Juno :) Funny...

Well, this is a nice opportunity to use fragments: Create a separate parameter-view and on tablets you may show it next to the function-view. But then, where to put the Julia-Parameter? Shouldn't it also be in parameter-view and function view? I hate such duplications...

ZN is implemented super-ugly. Use general Indexed-class

Task: Contains bitmap + preferences + task.

Has a targetfragment -> imageview.

ImageView:
   renders bitmap of taskfragment.

   ImageView: posts regularly that the image should be updated.

On implementing caching of images while retaining immutability of Prefs-classes

Create interface:

Bitmapable {
   bitmap();
   create(int width, int height, Bitmapable old_map);
}

Subclass has caching array (int-array where first int contains nrIter + hi bit contains type info,
following 1 or two ints are data.

Figure out how to create putPixel-method.
   Kind of like putPix(int[] pixInfo, int x, int y);

In Prefs create functions like "scale(Bitmabable preview, Bitmapable newPicture)"

No. Create own functions like "scale" in these Bitmapable-instances. Since
these classes are anyways related to the corresponding Pref I can do whatever
I want there.

[DONE] I was just thinking whether I should replace my background threads by AsyncTask, but then I don't need any interaction with the UI, so Thread seems actually fine. But then, think about it... I don't need a Task that only creates the workers and executes them. This can be done in the main-thread. And for the part that spells out "where from do we know whether we are finished" - well, we can share a counter on all onPostExecute-AsyncThread. This would be one less thread to manage and might speed up or at least simplify things.
I like this article on this topic: http://techtej.blogspot.co.at/2011/03/android-thread-constructspart-4.html
Further reading: http://developer.android.com/reference/android/os/AsyncTask.html#executeOnExecutor%28java.util.concurrent.Executor,%20Params...%29
Okay, the design might be as follows: You have in a calculator a method start. This one can invoke an executor. Additionally, add some interface like "OnCalculationFinishedRun" etc...
For now don't touch the design too much. [well I did and it looks nice]

Do the thing with the matrix such that you can pick a full-screen-mode or fit-to-center, and flip so that the number of pixels wasted is as small as possible.

Allow bookmarks, save configs for images that were completely rendered, create new prefs for each completely rendered pic (include a super-small preview, like 64x64 max), start where you started last time.

Dragging points

Show orbit.

Definitely need 2-dimensional color palettes + various drawing algorithms. They look sooo gorgeous...

Action View: Create a text field in actionbar for main formula.

Action View then would be "Navigation" with history, Save, Share, Formula (+ sub-elements with parameters and inits.), Colorization

Features: Offer "split view" on ImageView. Allow sharing of parameters with formulas. Thereby, changing a parameter in another ImageView changes the parameter in this.